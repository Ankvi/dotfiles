#!/usr/bin/env python

import dbus
from sys import argv


class SpotifyNotRunningError(Exception):
    pass


class CouldNotConnectToSpotifyError(Exception):
    pass


class MultipleSpotifyInstancesError(Exception):
    pass


class InvalidCommandError(Exception):
    pass


DBUS_OBJECT_PATH = '/org/mpris/MediaPlayer2'
DBUS_PROPERTIES_INTERFACE = 'org.freedesktop.DBus.Properties'
DBUS_PLAYER_INTERFACE = 'org.mpris.MediaPlayer2.Player'


class SpotifyModule:
    def __init__(self):
        self.__bus = dbus.SessionBus()

        self.__spotifyd = None
        self.__properties = None
        self.__player = None

        self.__spotifyd_mpris_instance = None

        for service in self.__bus.list_names():
            if "spotify" in service:
                if self.__spotifyd_mpris_instance is not None:
                    raise MultipleSpotifyInstancesError
                self.__spotifyd_mpris_instance = service

    def get_spotifyd(self):
        if self.__spotifyd_mpris_instance is None:
            raise SpotifyNotRunningError

        if self.__spotifyd is None:
            self.__spotifyd = self.__bus.get_object(
                self.__spotifyd_mpris_instance,
                DBUS_OBJECT_PATH,
                False
            )

        if self.__spotifyd is None:
            raise CouldNotConnectToSpotifyError

        return self.__spotifyd

    def get_properties(self):
        if self.__properties is None:
            self.__properties = dbus.Interface(
                self.get_spotifyd(),
                DBUS_PROPERTIES_INTERFACE
            )

        if self.__properties is None:
            raise CouldNotConnectToSpotifyError

        return self.__properties

    def get_player(self):
        if self.__player is None:
            self.__player = dbus.Interface(
                self.get_spotifyd(),
                DBUS_PLAYER_INTERFACE
            )

        if self.__player is None:
            raise CouldNotConnectToSpotifyError

        return self.__player

    def get_song_info(self):
        metadata = self.get_properties().Get(DBUS_PLAYER_INTERFACE, 'Metadata')
        title = metadata.get('xesam:title', 'Unknown title')
        artists = metadata.get('xesam:artist', ['Unknown artists'])
        artist = ", ".join(artists)
        return f'{artist} - {title}'

    def get_status(self):
        return self.get_properties().Get(DBUS_PLAYER_INTERFACE, 'PlaybackStatus')

    def print_song_info(self):
        match self.get_status():
            case 'Playing' | 'Paused':
                song_info = self.get_song_info()
                print(song_info)
            case _:
                print('Spotify')

    def print_is_playing_icon(self):
        try:
            print("" if self.get_status() == 'Playing' else "")
        except CouldNotConnectToSpotifyError:
            print("")


if __name__ == '__main__':
    try:
        spotify_module = SpotifyModule()

        if len(argv) < 2:
            spotify_module.print_song_info()
            exit()

        command = argv[1]
        match command:
            case 'play_pause':
                spotify_module.get_player().PlayPause()
            case 'print_song_info':
                spotify_module.print_song_info()
            case 'print_is_playing_icon':
                spotify_module.print_is_playing_icon()
            case 'next':
                spotify_module.get_player().Next()
            case 'previous':
                spotify_module.get_player().Previous()
            case 'status':
                print(spotify_module.get_status())

    except SpotifyNotRunningError:
        print('Spotify is not running')
    except CouldNotConnectToSpotifyError:
        print('Could not connect to Spotify')
    except InvalidCommandError:
        print('Invalid command')
    except MultipleSpotifyInstancesError:
        print('Multiple Spotifyd instances found')
    except Exception as e:
        print(f'Unknown error: {e}')
